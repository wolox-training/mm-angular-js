{"version":3,"sources":["../src/emulation.js"],"names":["FullscreenEmulationManager","chromy","model","_chromy","_client","client","_model","browserInfo","width","height","evaluate","devicePixelRatio","window","document","body","scrollWidth","scrollHeight","viewportWidth","innerWidth","viewportHeight","innerHeight","info","DOM","getDocument","documentNodeId","root","nodeId","querySelector","selector","bodyNodeId","getBoxModel","box","_deviceMetrics","deviceScaleFactor","mobile","fitWindow","m","Emulation","setVisibleSize","forceViewport","x","y","scale","setDeviceMetricsOverride","scrollTo","sleep","resetViewport","clearDeviceMetricsOverride","createFullscreenEmulationManager","manager","init","exports"],"mappings":";;;;;;;;;;;;;;;;IAAMA,0B;AACJ,sCAAaC,MAAb,EAAqBC,KAArB,EAA4B;AAAA;;AAC1B,SAAKC,OAAL,GAAeF,MAAf;AACA,SAAKG,OAAL,GAAeH,OAAOI,MAAtB;AACA,SAAKC,MAAL,GAAcJ,KAAd;AACA,SAAKK,WAAL,GAAmB,IAAnB;AACD;;;;;;;;;;;AAGKC,mB,GAAQ,C;AACRC,oB,GAAS,C;;iDACM,KAAKN,OAAL,CAAaO,QAAb,CAAsB,YAAY;AACnD,uBAAO;AACLC,oCAAkBC,OAAOD,gBADpB;AAELH,yBAAOK,SAASC,IAAT,CAAcC,WAFhB;AAGLN,0BAAQI,SAASC,IAAT,CAAcE,YAHjB;AAILC,iCAAeL,OAAOM,UAJjB;AAKLC,kCAAgBP,OAAOQ;AALlB,iBAAP;AAOD,eARkB,C;;;AAAbC,kB;;AASN,mBAAKd,WAAL,GAAmBc,IAAnB;;oBACI,KAAKf,MAAL,KAAgB,K;;;;;AACZgB,iB,GAAM,KAAKlB,OAAL,CAAakB,G;;iDACsBA,IAAIC,WAAJ,E;;;;AAAzBC,4B,QAAfC,I,CAAOC,M;;iDACqBJ,IAAIK,aAAJ,CAAkB;AACnDC,0BAAU,MADyC;AAEnDF,wBAAQF;AAF2C,eAAlB,C;;;;AAApBK,wB,SAARH,M;;iDAIWJ,IAAIQ,WAAJ,CAAgB,EAACJ,QAAQG,UAAT,EAAhB,C;;;AAAZE,iB;;AACNvB,sBAAQuB,IAAI7B,KAAJ,CAAUM,KAAlB;AACAC,uBAASsB,IAAI7B,KAAJ,CAAUO,MAAnB;;;;;AAEAD,sBAAQa,KAAKb,KAAb;AACAC,uBAASY,KAAKZ,MAAd;;;AAEF,mBAAKuB,cAAL,GAAsB;AACpBxB,4BADoB;AAEpBC,8BAFoB;AAGpBwB,mCAAmB,CAHC;AAIpBC,wBAAQ,KAJY;AAKpBC,2BAAW;AALS,eAAtB;;;;;;;;;;;;;;;;;AAUMC,e,GAAI,KAAKJ,c;;iDACT,KAAK5B,OAAL,CAAaiC,SAAb,CAAuBC,cAAvB,CAAsC,EAAC9B,OAAO4B,EAAE5B,KAAV,EAAiBC,QAAQ2B,EAAE3B,MAA3B,EAAtC,C;;;;iDACA,KAAKL,OAAL,CAAaiC,SAAb,CAAuBE,aAAvB,CAAqC,EAACC,GAAG,CAAJ,EAAOC,GAAG,CAAV,EAAaC,OAAO,CAApB,EAArC,C;;;;iDACA,KAAKtC,OAAL,CAAaiC,SAAb,CAAuBM,wBAAvB,CAAgDP,CAAhD,C;;;;iDACA,KAAKjC,OAAL,CAAayC,QAAb,CAAsB,CAAtB,EAAyB,CAAzB,C;;;;iDACA,KAAKzC,OAAL,CAAa0C,KAAb,CAAmB,GAAnB,C;;;;;;;;;;;;;;;;;AAIAxB,kB,GAAO,KAAKd,W;;iDACZ,KAAKH,OAAL,CAAaiC,SAAb,CAAuBS,aAAvB,E;;;;iDACA,KAAK1C,OAAL,CAAaiC,SAAb,CAAuBU,0BAAvB,E;;;;iDACA,KAAK3C,OAAL,CAAaiC,SAAb,CAAuBC,cAAvB,CAAsC,EAAC9B,OAAOa,KAAKJ,aAAb,EAA4BR,QAAQY,KAAKF,cAAzC,EAAtC,C;;;;;;;;;;;;;AAIV,SAAe6B,gCAAf,CAAiD/C,MAAjD,EAAyDC,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ+C,iBADR,GACkB,IAAIjD,0BAAJ,CAA+BC,MAA/B,EAAuCC,KAAvC,CADlB;AAAA;AAAA,6CAEQ+C,QAAQC,IAAR,EAFR;;AAAA;AAAA,4CAGSD,OAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMAE,QAAQH,gCAAR,GAA2CA,gCAA3C","file":"emulation.js","sourcesContent":["class FullscreenEmulationManager {\n  constructor (chromy, model) {\n    this._chromy = chromy\n    this._client = chromy.client\n    this._model = model\n    this.browserInfo = null\n  }\n\n  async init () {\n    let width = 0\n    let height = 0\n    const info = await this._chromy.evaluate(function () {\n      return {\n        devicePixelRatio: window.devicePixelRatio,\n        width: document.body.scrollWidth,\n        height: document.body.scrollHeight,\n        viewportWidth: window.innerWidth,\n        viewportHeight: window.innerHeight\n      }\n    })\n    this.browserInfo = info\n    if (this._model === 'box') {\n      const DOM = this._client.DOM\n      const {root: {nodeId: documentNodeId}} = await DOM.getDocument()\n      const {nodeId: bodyNodeId} = await DOM.querySelector({\n        selector: 'body',\n        nodeId: documentNodeId\n      })\n      const box = await DOM.getBoxModel({nodeId: bodyNodeId})\n      width = box.model.width\n      height = box.model.height\n    } else {\n      width = info.width\n      height = info.height\n    }\n    this._deviceMetrics = {\n      width,\n      height,\n      deviceScaleFactor: 0,\n      mobile: false,\n      fitWindow: false\n    }\n  }\n\n  async emulate () {\n    const m = this._deviceMetrics\n    await this._client.Emulation.setVisibleSize({width: m.width, height: m.height})\n    await this._client.Emulation.forceViewport({x: 0, y: 0, scale: 1})\n    await this._client.Emulation.setDeviceMetricsOverride(m)\n    await this._chromy.scrollTo(0, 0)\n    await this._chromy.sleep(200)\n  }\n\n  async reset () {\n    const info = this.browserInfo\n    await this._client.Emulation.resetViewport()\n    await this._client.Emulation.clearDeviceMetricsOverride()\n    await this._client.Emulation.setVisibleSize({width: info.viewportWidth, height: info.viewportHeight})\n  }\n}\n\nasync function createFullscreenEmulationManager (chromy, model) {\n  const manager = new FullscreenEmulationManager(chromy, model)\n  await manager.init()\n  return manager\n}\n\nexports.createFullscreenEmulationManager = createFullscreenEmulationManager\n"]}