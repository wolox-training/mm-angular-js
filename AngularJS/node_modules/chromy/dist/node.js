'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function () {
  function ChromyNode(client, nodeId) {
    (0, _classCallCheck3.default)(this, ChromyNode);

    this.client = client;
    this.dom = client.DOM;
    this.nodeId = nodeId;
    this._remoteObject = null;
  }

  (0, _createClass3.default)(ChromyNode, [{
    key: 'setAttributeValue',
    value: function setAttributeValue(name, value) {
      return _regenerator2.default.async(function setAttributeValue$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', this.dom.setAttributeValue({ nodeId: this.nodeId, name: name, value: value }));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'evaluate',
    value: function evaluate(fn) {
      var expr, _ref, object, fnDecl, params;

      return _regenerator2.default.async(function evaluate$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              expr = fn;

              if (typeof fn !== 'function') {
                expr = '() => {' + expr + '}';
              }
              _context2.next = 4;
              return _regenerator2.default.awrap(this.getRemoteObject());

            case 4:
              _ref = _context2.sent;
              object = _ref.object;
              fnDecl = 'function () { return (' + expr.toString() + ')() }';
              params = { objectId: object.objectId, functionDeclaration: fnDecl };
              return _context2.abrupt('return', this.client.Runtime.callFunctionOn(params));

            case 9:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getRemoteObject',
    value: function getRemoteObject() {
      return _regenerator2.default.async(function getRemoteObject$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!this._remoteObject) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt('return', this._remoteObject);

            case 2:
              _context3.next = 4;
              return _regenerator2.default.awrap(this.client.DOM.resolveNode({ nodeId: this.nodeId }));

            case 4:
              this._remoteObject = _context3.sent;
              return _context3.abrupt('return', this._remoteObject);

            case 6:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'id',
    get: function get() {
      return this.nodeId;
    }
  }]);
  return ChromyNode;
}();
//# sourceMappingURL=node.js.map