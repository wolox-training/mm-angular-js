'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require('fs');

var chainProxy = require('async-chain-proxy');
var uuidV4 = require('uuid/v4');
var devices = require('./devices');
var sharp = require('sharp');
var ChromyDOM = require('./dom');
var ChromyNode = require('./node');

var _require = require('./error'),
    TimeoutError = _require.TimeoutError,
    GotoTimeoutError = _require.GotoTimeoutError,
    WaitTimeoutError = _require.WaitTimeoutError,
    EvaluateTimeoutError = _require.EvaluateTimeoutError,
    EvaluateError = _require.EvaluateError;

var _require2 = require('./functionToSource'),
    functionToEvaluatingSource = _require2.functionToEvaluatingSource;

var _require3 = require('./util'),
    escapeHtml = _require3.escapeHtml,
    escapeSingleQuote = _require3.escapeSingleQuote,
    createChromeLauncher = _require3.createChromeLauncher,
    completeUrl = _require3.completeUrl;

var Document = function () {
  function Document() {
    var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck3.default)(this, Document);

    this.client = client;
    this.node = node;
  }

  (0, _createClass3.default)(Document, [{
    key: 'chain',
    value: function chain() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return chainProxy(this, options);
    }
  }, {
    key: '_getTargetIdFromOption',
    value: function _getTargetIdFromOption() {
      var result, page;
      return _regenerator2.default.async(function _getTargetIdFromOption$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof this.options.target === 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 3;
              return _regenerator2.default.awrap(this.client.Target.getTargets());

            case 3:
              result = _context.sent;
              page = this.options.target(result.targetInfos);
              return _context.abrupt('return', page.targetId);

            case 8:
              if (!((0, _typeof3.default)(this.options.target) === 'object')) {
                _context.next = 12;
                break;
              }

              return _context.abrupt('return', this.options.target.targetId);

            case 12:
              if (!(typeof this.options.target === 'string')) {
                _context.next = 16;
                break;
              }

              return _context.abrupt('return', this.options.target);

            case 16:
              throw new Error('type of `target` option is invalid.');

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_waitFinish',
    value: function _waitFinish(timeout, callback) {
      var _this = this;

      var start, finished, error, result, f, now;
      return _regenerator2.default.async(function _waitFinish$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              start = Date.now();
              finished = false;
              error = null;
              result = null;

              f = function _callee() {
                return _regenerator2.default.async(function _callee$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return _regenerator2.default.awrap(callback.apply());

                      case 3:
                        result = _context2.sent;

                        finished = true;
                        return _context2.abrupt('return', result);

                      case 8:
                        _context2.prev = 8;
                        _context2.t0 = _context2['catch'](0);

                        error = _context2.t0;
                        finished = true;

                      case 12:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, null, _this, [[0, 8]]);
              };

              f.apply();

            case 6:
              if (finished) {
                _context3.next = 14;
                break;
              }

              now = Date.now();

              if (!(now - start > timeout)) {
                _context3.next = 10;
                break;
              }

              throw new TimeoutError('timeout');

            case 10:
              _context3.next = 12;
              return _regenerator2.default.awrap(this.sleep(this.options.waitFunctionPollingInterval));

            case 12:
              _context3.next = 6;
              break;

            case 14:
              if (!(error !== null)) {
                _context3.next = 16;
                break;
              }

              throw error;

            case 16:
              return _context3.abrupt('return', result);

            case 17:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'iframe',
    value: function iframe(selector) {
      var nodeId, doc, result;
      return _regenerator2.default.async(function iframe$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              nodeId = null;

              if (!this.node) {
                _context4.next = 5;
                break;
              }

              nodeId = this.node.id;
              _context4.next = 9;
              break;

            case 5:
              _context4.next = 7;
              return _regenerator2.default.awrap(this.client.DOM.getDocument());

            case 7:
              doc = _context4.sent;

              nodeId = doc.root.nodeId;

            case 9:
              _context4.next = 11;
              return _regenerator2.default.awrap(this.client.DOM.querySelector({ selector: selector, nodeId: nodeId }));

            case 11:
              result = _context4.sent;

              if (result) {
                _context4.next = 14;
                break;
              }

              return _context4.abrupt('return', null);

            case 14:
              console.log(result);
              return _context4.abrupt('return', new Document(this.client, result.nodeId));

            case 16:
            case 'end':
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'evaluate',
    value: function evaluate(expr) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _regenerator2.default.async(function evaluate$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _regenerator2.default.awrap(this._evaluateWithReplaces(expr, options));

            case 2:
              return _context5.abrupt('return', _context5.sent);

            case 3:
            case 'end':
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_evaluateWithReplaces',
    value: function _evaluateWithReplaces(expr) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var replaces = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var e, result, resultObject, type;
      return _regenerator2.default.async(function _evaluateWithReplaces$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              e = functionToEvaluatingSource(expr, replaces);
              _context7.prev = 1;
              _context7.next = 4;
              return _regenerator2.default.awrap(this._waitFinish(this.options.evaluateTimeout, function _callee2() {
                var params;
                return _regenerator2.default.async(function _callee2$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        if (_this2.client) {
                          _context6.next = 2;
                          break;
                        }

                        return _context6.abrupt('return', null);

                      case 2:
                        params = Object.assign({}, options, { expression: e });
                        _context6.next = 5;
                        return _regenerator2.default.awrap(_this2.client.Runtime.evaluate(params));

                      case 5:
                        return _context6.abrupt('return', _context6.sent);

                      case 6:
                      case 'end':
                        return _context6.stop();
                    }
                  }
                }, null, _this2);
              }));

            case 4:
              result = _context7.sent;

              if (!(!result || !result.result)) {
                _context7.next = 7;
                break;
              }

              return _context7.abrupt('return', null);

            case 7:
              if (!(result.result.subtype === 'promise')) {
                _context7.next = 12;
                break;
              }

              _context7.next = 10;
              return _regenerator2.default.awrap(this.client.Runtime.awaitPromise({ promiseObjectId: result.result.objectId, returnByValue: true }));

            case 10:
              result = _context7.sent;

              // adjust to after process
              result.result.value = JSON.stringify({ type: (0, _typeof3.default)(result.result.value), result: JSON.stringify(result.result.value) });

            case 12:
              if (!(result.result.subtype === 'error')) {
                _context7.next = 14;
                break;
              }

              throw new EvaluateError('An error has been occurred in evaluated script on a browser.' + result.result.description, result.result);

            case 14:
              resultObject = JSON.parse(result.result.value);
              type = resultObject.type;

              if (!(type === 'undefined')) {
                _context7.next = 20;
                break;
              }

              return _context7.abrupt('return', undefined);

            case 20:
              _context7.prev = 20;
              return _context7.abrupt('return', JSON.parse(resultObject.result));

            case 24:
              _context7.prev = 24;
              _context7.t0 = _context7['catch'](20);

              console.log('ERROR', resultObject);
              throw _context7.t0;

            case 28:
              _context7.next = 37;
              break;

            case 30:
              _context7.prev = 30;
              _context7.t1 = _context7['catch'](1);

              if (!(_context7.t1 instanceof TimeoutError)) {
                _context7.next = 36;
                break;
              }

              throw new EvaluateTimeoutError('evaluate() timeout');

            case 36:
              throw _context7.t1;

            case 37:
            case 'end':
              return _context7.stop();
          }
        }
      }, null, this, [[1, 30], [20, 24]]);
    }

    /**
     * define function
     *
     * @param func {(function|string|Array.<function>|Array.<string>)}
     * @returns {Promise.<void>}
     */

  }, {
    key: 'defineFunction',
    value: function defineFunction(def) {
      var funcs, i, f;
      return _regenerator2.default.async(function defineFunction$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              funcs = [];

              if (Array.isArray(def)) {
                funcs = def;
              } else if ((typeof def === 'undefined' ? 'undefined' : (0, _typeof3.default)(def)) === 'object') {
                funcs = this._moduleToFunctionSources(def);
              } else {
                funcs.push(def);
              }
              i = 0;

            case 3:
              if (!(i < funcs.length)) {
                _context8.next = 11;
                break;
              }

              f = funcs[i];

              if (typeof f === 'function') {
                f = f.toString();
              }
              _context8.next = 8;
              return _regenerator2.default.awrap(this.client.Runtime.evaluate({ expression: f }));

            case 8:
              i++;
              _context8.next = 3;
              break;

            case 11:
            case 'end':
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_moduleToFunctionSources',
    value: function _moduleToFunctionSources(module) {
      var result = [];
      for (var funcName in module) {
        var func = module[funcName];
        var src = ('function ' + funcName + ' () { return (' + func.toString() + ')(...arguments) }').trim();
        result.push(src);
      }
      return result;
    }
  }, {
    key: 'sleep',
    value: function sleep(msec) {
      return _regenerator2.default.async(function sleep$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _regenerator2.default.awrap(new Promise(function (resolve, reject) {
                setTimeout(function () {
                  resolve();
                }, msec);
              }));

            case 2:
            case 'end':
              return _context9.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'wait',
    value: function wait(cond) {
      return _regenerator2.default.async(function wait$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(typeof cond === 'number')) {
                _context10.next = 5;
                break;
              }

              _context10.next = 3;
              return _regenerator2.default.awrap(this.sleep(cond));

            case 3:
              _context10.next = 12;
              break;

            case 5:
              if (!(typeof cond === 'function')) {
                _context10.next = 10;
                break;
              }

              _context10.next = 8;
              return _regenerator2.default.awrap(this._waitFunction(cond));

            case 8:
              _context10.next = 12;
              break;

            case 10:
              _context10.next = 12;
              return _regenerator2.default.awrap(this._waitSelector(cond));

            case 12:
            case 'end':
              return _context10.stop();
          }
        }
      }, null, this);
    }

    // wait for func to return true.

  }, {
    key: '_waitFunction',
    value: function _waitFunction(func) {
      var _this3 = this;

      return _regenerator2.default.async(function _waitFunction$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _regenerator2.default.awrap(this._waitFinish(this.options.waitTimeout, function _callee3() {
                var r;
                return _regenerator2.default.async(function _callee3$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        if (!true) {
                          _context11.next = 10;
                          break;
                        }

                        _context11.next = 3;
                        return _regenerator2.default.awrap(_this3.evaluate(func));

                      case 3:
                        r = _context11.sent;

                        if (!r) {
                          _context11.next = 6;
                          break;
                        }

                        return _context11.abrupt('break', 10);

                      case 6:
                        _context11.next = 8;
                        return _regenerator2.default.awrap(_this3.sleep(_this3.options.waitFunctionPollingInterval));

                      case 8:
                        _context11.next = 0;
                        break;

                      case 10:
                      case 'end':
                        return _context11.stop();
                    }
                  }
                }, null, _this3);
              }));

            case 2:
            case 'end':
              return _context12.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_waitSelector',
    value: function _waitSelector(selector) {
      var _this4 = this;

      var _check, startTime;

      return _regenerator2.default.async(function _waitSelector$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _check = null;
              startTime = Date.now();
              _context14.next = 4;
              return _regenerator2.default.awrap(new Promise(function (resolve, reject) {
                _check = function check() {
                  setTimeout(function _callee4() {
                    var now, result;
                    return _regenerator2.default.async(function _callee4$(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            _context13.prev = 0;
                            now = Date.now();

                            if (!(now - startTime > _this4.options.waitTimeout)) {
                              _context13.next = 5;
                              break;
                            }

                            reject(new WaitTimeoutError('wait() timeout'));
                            return _context13.abrupt('return');

                          case 5:
                            _context13.next = 7;
                            return _regenerator2.default.awrap(_this4._evaluateWithReplaces(function () {
                              return document.querySelector('?');
                            }, {}, { '?': escapeSingleQuote(selector) }));

                          case 7:
                            result = _context13.sent;

                            if (result) {
                              resolve(result);
                            } else {
                              _check();
                            }
                            _context13.next = 14;
                            break;

                          case 11:
                            _context13.prev = 11;
                            _context13.t0 = _context13['catch'](0);

                            reject(_context13.t0);

                          case 14:
                          case 'end':
                            return _context13.stop();
                        }
                      }
                    }, null, _this4, [[0, 11]]);
                  }, _this4.options.waitFunctionPollingInterval);
                };
                _check();
              }));

            case 4:
            case 'end':
              return _context14.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'type',
    value: function type(expr, value) {
      var characters, i, c;
      return _regenerator2.default.async(function type$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return _regenerator2.default.awrap(this.evaluate('document.querySelector("' + expr + '").focus()'));

            case 2:
              characters = value.split('');
              _context15.t0 = _regenerator2.default.keys(characters);

            case 4:
              if ((_context15.t1 = _context15.t0()).done) {
                _context15.next = 13;
                break;
              }

              i = _context15.t1.value;
              c = characters[i];
              _context15.next = 9;
              return _regenerator2.default.awrap(this.client.Input.dispatchKeyEvent({ type: 'char', text: c }));

            case 9:
              _context15.next = 11;
              return _regenerator2.default.awrap(this.sleep(this.options.typeInterval));

            case 11:
              _context15.next = 4;
              break;

            case 13:
            case 'end':
              return _context15.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'insert',
    value: function insert(expr, value) {
      return _regenerator2.default.async(function insert$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              expr = escapeSingleQuote(expr);
              _context16.next = 3;
              return _regenerator2.default.awrap(this.evaluate('document.querySelector(\'' + expr + '\').focus()'));

            case 3:
              _context16.next = 5;
              return _regenerator2.default.awrap(this.evaluate('document.querySelector(\'' + expr + '\').value = "' + escapeHtml(value) + '"'));

            case 5:
            case 'end':
              return _context16.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'click',
    value: function click(expr) {
      var inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var defaults, options, promise, dom, nodes, i, node;
      return _regenerator2.default.async(function click$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              defaults = { waitLoadEvent: false };
              options = Object.assign({}, defaults, inputOptions);
              promise = null;

              if (options.waitLoadEvent) {
                promise = this.waitLoadEvent();
              }
              dom = new ChromyDOM(this.client);
              _context17.next = 7;
              return _regenerator2.default.awrap(dom.querySelectorAll(expr));

            case 7:
              nodes = _context17.sent;
              _context17.t0 = _regenerator2.default.keys(nodes);

            case 9:
              if ((_context17.t1 = _context17.t0()).done) {
                _context17.next = 16;
                break;
              }

              i = _context17.t1.value;
              node = nodes[i];
              _context17.next = 14;
              return _regenerator2.default.awrap(node.evaluate('this.click()'));

            case 14:
              _context17.next = 9;
              break;

            case 16:
              if (!(promise !== null)) {
                _context17.next = 19;
                break;
              }

              _context17.next = 19;
              return _regenerator2.default.awrap(promise);

            case 19:
            case 'end':
              return _context17.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'check',
    value: function check(selector) {
      return _regenerator2.default.async(function check$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _regenerator2.default.awrap(this.evaluate('document.querySelectorAll(\'' + escapeSingleQuote(selector) + '\').forEach(n => n.checked = true)'));

            case 2:
            case 'end':
              return _context18.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'uncheck',
    value: function uncheck(selector) {
      return _regenerator2.default.async(function uncheck$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return _regenerator2.default.awrap(this.evaluate('document.querySelectorAll(\'' + escapeSingleQuote(selector) + '\').forEach(n => n.checked = false)'));

            case 2:
            case 'end':
              return _context19.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'select',
    value: function select(selector, value) {
      var sel, src;
      return _regenerator2.default.async(function select$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              sel = escapeSingleQuote(selector);
              src = '\n      document.querySelectorAll(\'' + sel + ' > option\').forEach(n => {\n        if (n.value === "' + value + '") {\n          n.selected = true\n        }\n      })\n      ';
              _context20.next = 4;
              return _regenerator2.default.awrap(this.evaluate(src));

            case 4:
            case 'end':
              return _context20.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'scroll',
    value: function scroll(x, y) {
      return _regenerator2.default.async(function scroll$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              return _context21.abrupt('return', this._evaluateWithReplaces(function () {
                var dx = _1; // eslint-disable-line no-undef
                var dy = _2; // eslint-disable-line no-undef
                window.scrollTo(window.pageXOffset + dx, window.pageYOffset + dy);
              }, {}, { '_1': x, '_2': y }));

            case 1:
            case 'end':
              return _context21.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'scrollTo',
    value: function scrollTo(x, y) {
      return _regenerator2.default.async(function scrollTo$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt('return', this._evaluateWithReplaces(function () {
                window.scrollTo(_1, _2); // eslint-disable-line no-undef
              }, {}, { '_1': x, '_2': y }));

            case 1:
            case 'end':
              return _context22.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getBoundingClientRect',
    value: function getBoundingClientRect(selector) {
      var result;
      return _regenerator2.default.async(function getBoundingClientRect$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return _regenerator2.default.awrap(this._evaluateWithReplaces(function () {
                var dom = document.querySelector('?');
                if (!dom) {
                  return null;
                }
                var rect = dom.getBoundingClientRect();
                return {
                  rect: { top: rect.top, left: rect.left, width: rect.width, height: rect.height }
                };
              }, {}, { '?': escapeSingleQuote(selector) }));

            case 2:
              result = _context23.sent;

              if (result) {
                _context23.next = 5;
                break;
              }

              return _context23.abrupt('return', null);

            case 5:
              return _context23.abrupt('return', {
                top: Math.floor(result.rect.top),
                left: Math.floor(result.rect.left),
                width: Math.floor(result.rect.width),
                height: Math.floor(result.rect.height)
              });

            case 6:
            case 'end':
              return _context23.stop();
          }
        }
      }, null, this);
    }
  }]);
  return Document;
}();

module.exports = Document;
//# sourceMappingURL=document.js.map