'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ChromyNode = require('./node');

module.exports = function () {
  function ChromyDOM(client) {
    var nodeId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck3.default)(this, ChromyDOM);

    this.client = client;
    this.dom = client.DOM;
    this.nodeId = nodeId;
  }

  (0, _createClass3.default)(ChromyDOM, [{
    key: 'querySelector',
    value: function querySelector(selector) {
      var params, resultNodeId;
      return _regenerator2.default.async(function querySelector$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              params = { selector: selector };

              if (this.nodeId) {
                params.nodeId = nodeId;
              }
              _context.next = 4;
              return _regenerator2.default.awrap(this.dom.querySelector(params));

            case 4:
              resultNodeId = _context.sent;

              if (!resultNodeId) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return', new ChromyNode(this.client, resultNodeId));

            case 9:
              return _context.abrupt('return', null);

            case 10:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'querySelectorAll',
    value: function querySelectorAll(selector) {
      var _this = this;

      var params, doc, resultNodeIds;
      return _regenerator2.default.async(function querySelectorAll$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              params = { selector: selector };

              if (!this.nodeId) {
                _context2.next = 5;
                break;
              }

              params.nodeId = nodeId;
              _context2.next = 9;
              break;

            case 5:
              _context2.next = 7;
              return _regenerator2.default.awrap(this.dom.getDocument());

            case 7:
              doc = _context2.sent;

              params.nodeId = doc.root.nodeId;

            case 9:
              _context2.next = 11;
              return _regenerator2.default.awrap(this.dom.querySelectorAll(params));

            case 11:
              resultNodeIds = _context2.sent;

              if (!(resultNodeIds.nodeIds.length === 0)) {
                _context2.next = 16;
                break;
              }

              return _context2.abrupt('return', []);

            case 16:
              return _context2.abrupt('return', resultNodeIds.nodeIds.map(function (nid) {
                return new ChromyNode(_this.client, nid);
              }));

            case 17:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }]);
  return ChromyDOM;
}();
//# sourceMappingURL=dom.js.map